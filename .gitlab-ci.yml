stages:
  - prepare
  - build
  - test
  - docker
  - stg
  - prod

include:
  - project: "cicd-blueprints/pipeline-modules/ci/nodejs"
    file: "main.gitlab-ci.yml"
    ref: 12.0.0
  - project: "cicd-blueprints/pipeline-modules/cd/flux"
    file: "main.gitlab-ci.yml"
    ref: 3.4.0
  - project: "cicd-blueprints/pipelines/multi-branch-deployment"
    file: "main.gitlab-ci.yml"
    ref: 1.3.3

# Adjust only "PROVIDER_IMAGE_TAG" to your needs. This will set the tag of the docker image to be deployed. This docker image tag cannot be updated once the branch is deployed!
variables:
  GITLAB_REGISTRY: "true"
  STG_DEPLOY_BRANCH: "master"
  SETTINGS_IMAGE_TAG: $CI_COMMIT_BRANCH
  DEPLOYMENT_REPO: git@gitlab.id-repository.de:west/deployments.git
  DEPLOYMENT: settings-ui
  DEPLOY_BRANCH_STG: "false" # "branch deployment that is overwriting branch is not required"
  REPO: docker.id-repository.de
  IMAGE_NAME: west/settings-ui
  FLUX_FORWARD_NAMESPACE: west
  NODE_VERSION: 19
  CYPRESS_VERSION: node16.5.0-chrome94-ff93
  NPM_INSTALL: "true"
  CSS_LINT: "false"
  ES_LINT: "true"
  BUILD: "false"
  AUDIT: "false"
  UNIT_TEST: "false"
  INTEGRATION_TEST: "false"
  AUTO_DEPLOY_PROD: "false"

docker:staging:
  extends: .build-and-push-docker # from nodejs template
  variables:
    BUILD_ARGS: --build-arg ENVIRONMENT=staging
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: $CI_COMMIT_TAG
      when: never

docker:branch:
  extends: .build-and-push-docker # from nodejs template
  variables:
    BUILD_ARGS: --build-arg ENVIRONMENT=staging
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: '$CI_COMMIT_BRANCH != "master" && $CI_COMMIT_TAG == null'
    - if: $CI_COMMIT_TAG
      when: never

docker:production:
  extends: .build-and-push-docker # from nodejs template
  variables:
    BUILD_ARGS: --build-arg ENVIRONMENT=production
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: '$CI_COMMIT_TAG =~ /^?(v)?\d+\.\d+\.\d+(-|\.)?(RC\d|RELEASE)?$/'

# build sidecar container with mocking data
json-server:
  stage: docker
  image: docker
  variables:
    IMAGE_NAME: settings-ui-mock
    REPO: ippendigital
  script:
    - echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
    - docker build json-db -t $IMAGE_NAME
    - docker tag $IMAGE_NAME $REPO/$IMAGE_NAME:$CI_COMMIT_REF_NAME
    - docker push $REPO/$IMAGE_NAME:$CI_COMMIT_REF_NAME
